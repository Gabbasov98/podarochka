$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

function cartCalc() {
    $('.cartcalc .ccalc-minus').click(function(e) {
        let a = $(this).closest('.cartcalc').find('input').val();
        if (a > 1) {
            let b = +a - 1;
            $(this).closest('.cartcalc').find('input').val(b);
            $(this).closest('.cartcalc').find('input').trigger('change');
        } else {
            $(this).closest('.cartcalc').find('input').val(a);
            $(this).parents(".product-card").removeClass("_added")
        }
        e.stopImmediatePropagation()
    });

    $('.cartcalc .ccalc-plus').click(function(e) {
        let a = $(this).closest('.cartcalc').find('input').val();
        let b = +a + 1;
        $(this).closest('.cartcalc').find('input').val(b);
        $(this).closest('.cartcalc').find('input').trigger('change');
        e.stopImmediatePropagation()
    });

}

cartCalc()

$(".product-card__add").click(function () {
    $(this).parents(".product-card").addClass("_added")
})

$(".favourite-btn").click(function () {
    $(this).toggleClass("_added")
})

$(".burger").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})

$(".catalog-btn").click(function () {
    $(".header").toggleClass("_open-catalog")
})

$(document).mouseup( function(e){
    let div = $( ".header" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open-catalog")){
            $(div).removeClass("_open-catalog")
        }
    }
});

$(".m-search__field input").on("input",function () {
    let parent = $(this).parents(".m-search")

    if($(this).val().length > 0){
        $(parent).addClass("_show-result")
    } else{
        $(parent).removeClass("_show-result")
    }
})

$(".m-search__clear").click(function () {
    let input = $(this).parents(".m-search").find(".m-search__field input")
    $(input).val("").trigger("input");
})

$(document).mouseup( function(e){
    let div = $( ".m-search" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_show-result")){
            $(div).removeClass("_show-result")
        }
    }
});


$(".catalog-menu__show").click(function () {
    $(this).parents(".catalog-menu").toggleClass("_open")
    $(this).siblings(".catalog-menu__hidden").slideToggle()
})

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
gallery()

let filterSliders = document.querySelectorAll(".filter-slider")

filterSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeInput0 = slider.querySelector(`.range-slider__input1`)
    const rangeInput1 = slider.querySelector(`.range-slider__input2`)
    const rangeInputs = [rangeInput0, rangeInput1]

    let startValue1 = +slider.getAttribute("data-start")
    let startValue2 = +slider.getAttribute("data-start2")
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: [startValue1, startValue2],
            connect: true,
            step: 1,
            range: {
                'min': min,
                'max': max
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('update', function(values, handle) {
            rangeInputs[handle].value = Math.round(values[handle])
        })
        rangeInputs.forEach((el, index) => {
            el.addEventListener('change', (e) => {
                setRangeSlider(index, e.currentTarget.value)
            })
        })
    }
    const setRangeSlider = (i, value) => {
        let array = [null, null];
        array[i] = value;

        rangeSlider.noUiSlider.set(array);
    };
})

$("._filter-toggle").click(function () {
    $("body").toggleClass("fixed-body")
    $("body").toggleClass("_open-filter")
})

$(".filter-group__top").click(function() {
    $(this).parents(".filter-group").toggleClass("_open")
    $(this).siblings(".filter-group__bottom").slideToggle()
})

$(".cart__all input").change(function() {
    let checked = $(this).prop("checked")

    selectAllCartItems(checked)

    isSelected()
})

$(".cart-card__check input").change(function() {
    let uncheckedItems = $(".cart-card__check input:not(:checked)").length
    isSelected()
    if (uncheckedItems === 0) {
        $(".cart__all input").prop("checked", true)
    } else {
        $(".cart__all input").prop("checked", false)
    }
})

function selectAllCartItems(checked) {
    $(".cart-card__check input").each(function(i, el) {
        $(el).prop("checked", checked)
        $('el').trigger('change');
    })
}

$("._select-all").click(function () {
    selectAllCartItems(true)
    $(".cart__all input").prop("checked",true)
    isSelected()
})

function isSelected() {
    let checkedItems = $(".cart-card__check input:checked").length

    if(checkedItems > 0){
        $(".cart").addClass("_selected")
    } else{
        $(".cart").removeClass("_selected")
    }
}

$(".cart-card").each(function(i, el) {
    let input = $(el).find(".cart-card__calc input")
    let price = $(el).find("._price")
    let total = $(el).find("._total")
    let count = +input.val()


    $(total).html(count * +price.html())
    isMultiItems()

    $(input).change(function() {
        count = +input.val()
        $(total).html(count * +price.html())
        isMultiItems()
    })

    function isMultiItems() {
        if(count>1){
            $(el).addClass("_multi")
        } else{
            $(el).removeClass("_multi")
        }
    }
})

$("[name='deliveryWay']").change(function () {
    validateOrder()

    if(isDeliveryByCourier()){
        $(".order").addClass("_show-address")
    } else{
        $(".order").removeClass("_show-address")
    }
})

$("[name='payWay']").change(function () {
    validateOrder()
})

let orderNameField = $("[name='name']")
let orderPhoneField = $("[name='phone']")
let orderAddressField = $("[name='address']")
$(orderNameField).change(function () {
    validateOrder()
})
$(orderPhoneField).change(function () {
    validateOrder()
})
$(orderAddressField).change(function () {
    validateOrder()
})

function validateOrder() {
    let deliveryWayChecked = !!$("[name='deliveryWay']:checked").length
    let payWayChecked = !!$("[name='payWay']:checked").length
    let orderNameFilled = !!$(orderNameField).val()
    let phone = $(orderPhoneField).val().replace(/[^+\d]/g, '')
    let orderPhoneFilled = phone.length === 12

    let formSuccessFilled = deliveryWayChecked &&
                            payWayChecked &&
                            orderNameFilled &&
                            orderPhoneFilled


    if(isDeliveryByCourier()){
        let orderAddressFilled = !!$(orderAddressField).val()

        formSuccessFilled = deliveryWayChecked &&
            payWayChecked &&
            orderNameFilled &&
            orderPhoneFilled &&
            orderAddressFilled
    }

    if(formSuccessFilled){
        $(".order").addClass("_filled")
    } else{
        $(".order").removeClass("_filled")
    }
}

function isDeliveryByCourier() {
    let value = $("[name='deliveryWay']:checked").val()
    if(value === "courier"){
        return true
    } else{
        return false
    }
}

let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $("._select").niceSelect()
    $('input[type="tel"]').mask('+7 (999) 999-99-99', { autoclear: false }, { placeholder: '+7 (   )    -  -  ' });
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
